name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  release:
    types: [ published ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Run code formatting check
      run: npm run lint

    - name: Verify no formatting issues
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code formatting issues detected. Run 'npm run lint:fix' to fix them."
          git diff
          exit 1
        fi

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests with coverage
      run: npm run coverage

    - name: Check coverage threshold
      run: |
        echo "üîç Checking code coverage results..."
        
        # Set minimum coverage threshold (45%)
        COVERAGE_THRESHOLD=45
        
        # Extract coverage percentage from coverage reports
        if [ -d "./coverage" ]; then
          # Look for coverage summary (this may need adjustment based on your coverage tool output)
          COVERAGE_PERCENT=$(find ./coverage -name "*.xml" -o -name "*.json" | head -1 | xargs grep -o "line-rate=\"[0-9.]*\"" | head -1 | sed 's/line-rate="//' | sed 's/"//' | awk '{print int($1*100)}' || echo "0")
          
          echo "üìä Code Coverage: ${COVERAGE_PERCENT}%"
          echo "üéØ Required Threshold: ${COVERAGE_THRESHOLD}%"
          
          if [ "$COVERAGE_PERCENT" -ge "$COVERAGE_THRESHOLD" ]; then
            echo "‚úÖ Coverage threshold met!"
          else
            echo "‚ùå Coverage below threshold (${COVERAGE_PERCENT}% < ${COVERAGE_THRESHOLD}%)"
            echo "Please add more tests to improve coverage."
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  Coverage reports not found, skipping coverage check"
        fi

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Create NuGet packages
      run: npm run pack:nuget -- --output artifacts/packages

    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: artifacts/packages/
        retention-days: 90

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: artifacts/packages/

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Publish to NuGet
      run: |
        for package in artifacts/packages/*.nupkg; do
          echo "Publishing $package"
          dotnet nuget push "$package" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        done

    - name: Create GitHub Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/packages/*.nupkg
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}